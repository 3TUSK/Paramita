plugins {
    id 'com.modrinth.minotaur' version '2.+' apply false
}

interface PlatformInfoExtension {
    // Which platform (i.e. Fabric/Forge/Quilt) is this implementation is on?
    // In case of projects uses solely VanillaGradle, here we use 'Vanilla'.
    Property<String> getPlatform();
    // Which Minecraft version is this implementation based on?
    Property<String> getMinecraftVersion();
    // Which Minecraft version is this implementation compatible with?
    ListProperty<String> getSupportedMinecraftVersions();
}

def mainVersion = '1.0.0'

subprojects { Project p ->
    apply plugin: 'java'
    apply plugin: 'com.modrinth.minotaur' // https://stackoverflow.com/a/50153617

    p.extensions.create('platformInfo', PlatformInfoExtension)

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()

    p.archivesBaseName = "ExampleMultiProjectMod"
    p.version = mainVersion

    p.repositories {
        // Enable maven central for all subprojects
        mavenCentral()
        // Enable sponge maven for all subprojects, for access to Mixin
        maven {
            name = 'SpongePowered'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
    }

    p.tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
    }

    p.processResources {
        // Exclude .cache directory which is generated by DataGen.
        exclude '.cache'
    }

    p.afterEvaluate { Project pAfter ->

        if (!pAfter.name.endsWith('base')) {
            String baseProject = ':' + pAfter.name.substring(0, pAfter.name.indexOf('-')) + '-base'
            pAfter.compileJava {
                source(pAfter.project(baseProject).sourceSets.main.allSource)
            }
            pAfter.sourcesJar {
                from project(baseProject).sourceSets.main.allJava
            }
            pAfter.processResources {
                from project(baseProject).sourceSets.main.resources
            }
        }

        def projectExt = pAfter.extensions.platformInfo as PlatformInfoExtension

        def useLoom = pAfter.extensions.findByName('loom')

        if (useLoom) {
            pAfter.loom {
                // Uncomment this if you have Mixin configurations
                // mixin {
                //     // Enable legacy Mixin AP properties, so that we can override
                //     // default refmap file name.
                //     useLegacyMixinAp = true
                //     defaultRefmapName = 'examplemod.refmap.json'
                // }
            }
        }

        pAfter.archivesBaseName += "-${projectExt.platform.get()}-${projectExt.minecraftVersion.get()}"

        if ("Vanilla" != projectExt.platform.get()) {
            pAfter.modrinth {
                token = System.getenv("MODRINTH_TOKEN")
                projectId = System.getenv("MODRINTH_PROJECT_ID")
                loaders = [ projectExt.platform.get().toLowerCase(Locale.ROOT) ]
                gameVersions = projectExt.supportedMinecraftVersions.getOrElse([])
                uploadFile = useLoom ? pAfter.remapJar : pAfter.jar
                versionNumber = mainVersion
                versionType = 'release' // alpha | beta | release
                // TODO Declare Dependency
            }
        } else {
            // Disable modrinth task for base projects
            pAfter.tasks.named("modrinth") {
                enabled = false
            }
        }

        pAfter.jar {
            manifest.attributes([
                    "Specification-Title": "Example-Mod",
                    "Specification-Vendor": "Whoever comes up with the spec of the mod",
                    "Specification-Version": "1.0",
                    "Implementation-Title": "${pAfter.archivesBaseName}",
                    "Implementation-Version": "${pAfter.version}",
                    "Implementation-Vendor": "Whoever actually writes the mod"
            ])
        }
    }

}
