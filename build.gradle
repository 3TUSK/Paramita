import java.time.Instant
import java.time.format.DateTimeFormatter
import java.time.temporal.ChronoUnit

interface PlatformInfoExtension {
    // Which platform (i.e. Fabric/Forge/Quilt) is this implementation is on?
    // In case of projects uses solely VanillaGradle, here we use 'Vanilla'.
    Property<String> getPlatform();
    // Which Minecraft version is this implementation based on?
    Property<String> getMinecraftVersion();
}

subprojects { Project p ->
    apply plugin: 'java'

    p.extensions.create('platformInfo', PlatformInfoExtension)

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()

    p.archivesBaseName = "ExampleMod"
    p.version = "1.0.0"

    p.repositories {
        // Enable maven central for all subprojects
        mavenCentral()
        // Enable sponge maven for all subprojects, for access to Mixin
        maven {
            name = 'SpongePowered'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
    }

    p.tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
    }

    p.processResources {
        // Exclude .cache directory which is generated by DataGen.
        exclude '.cache'
    }

    p.afterEvaluate { Project pAfter ->

        if (!pAfter.name.endsWith('base')) {
            String baseProject = ':' + pAfter.name.substring(0, pAfter.name.indexOf('-')) + '-base'
            pAfter.compileJava {
                source(pAfter.project(baseProject).sourceSets.main.allSource)
            }
            pAfter.sourcesJar {
                from project(baseProject).sourceSets.main.allJava
            }
            pAfter.processResources {
                from project(baseProject).sourceSets.main.resources
            }
        }

        if (pAfter.extensions.findByName('loom')) {
            pAfter.loom {
                // Uncomment this if you have Mixin configurations
                // mixin {
                //     // Enable legacy Mixin AP properties, so that we can override
                //     // default refmap file name.
                //     useLegacyMixinAp = true
                //     defaultRefmapName = 'examplemod.refmap.json'
                // }
            }
        }

        def projectExt = pAfter.extensions.platformInfo as PlatformInfoExtension
        pAfter.archivesBaseName += "-${projectExt.platform.get()}-${projectExt.minecraftVersion.get()}"

        pAfter.jar {
            manifest.attributes([
                    "Specification-Title": "Example-Mod",
                    "Specification-Vendor": "Whoever comes up with the spec of the mod",
                    "Specification-Version": "1.0",
                    "Implementation-Title": "${pAfter.archivesBaseName}",
                    "Implementation-Version": "${pAfter.version}",
                    "Implementation-Vendor": "Whoever actually writes the mod",
                    "Implementation-Timestamp": DateTimeFormatter.ISO_INSTANT.format(Instant.now().truncatedTo(ChronoUnit.SECONDS))
            ])
        }
    }

}
